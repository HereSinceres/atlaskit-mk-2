import * as svgexport from 'svgexport';
import { resolve } from 'path';
import { writeFileSync, readFileSync } from 'fs';
import * as rimraf from 'rimraf';

const svgRelativePath = '../../../../../../core/icon/svgs_raw';
const svgSrc = resolve(__dirname, svgRelativePath);
const tempFolder = resolve(__dirname, './tmp');
const generatedWarning =
  '// DO NOT EDIT THIS FILE DIRECTLY! \n// This file was auto generated and may be overritten.\n// To make changes, use the generator.\n\n';
const exportOpts = [
  // For panels
  { name: 'info', input: 'editor/info' },
  { name: 'note', input: 'editor/note' },
  { name: 'tip', input: 'editor/hint' },
  { name: 'success', input: 'editor/success' },
  { name: 'warning', input: 'editor/warning' },
  { name: 'error', input: 'editor/error' },

  // TODO: for other stuff
].map(file => ({
  input: resolve(svgSrc, `${file.input}.svg`),
  name: file.name,
  output: resolve(tempFolder, `./${file.name}.png`),
}));

const createIcons = () => {
  svgexport.render(exportOpts, () => {
    createIndividualIconModules();

    const indexFileExports = exportOpts
      .map(icon => `export * from './${icon.name}'`)
      .join('\n');

    const indexFileEnum = `
      export enum IconName {
        ${exportOpts.map(icon => `${icon.name} = '${icon.name}',`).join('\n')}
      }`;

    const indexFileIconNameType = `
      export type IconString =
        ${exportOpts.map(icon => `'${icon.name}'`).join(' | ')}
      `;

    const indexFileContents = [
      generatedWarning,
      indexFileExports,
      indexFileEnum,
      indexFileIconNameType,
    ].join('\n');

    writeFileSync(resolve(__dirname, `../icons/index.ts`), indexFileContents);

    rimraf(tempFolder, err => {
      // Done.
    });
  });
};

const createIndividualIconModules = () => {
  exportOpts.map(icon =>
    writeFileSync(
      resolve(__dirname, `../icons/${icon.name}.ts`),
      `${generatedWarning}
      export const ${icon.name} = 'data:image/png;base64,${readFileSync(
        icon.output,
      ).toString('base64')}'`,
    ),
  );
};

createIcons();
