// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal should be found by data-testid Using container snapshot 1`] = `<div />`;

exports[`Modal-dialog snapshot should be same with data-testid  1`] = `
Array [
  .emotion-5 {
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: 510;
  -webkit-overflow-scrolling: touch;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-4 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-3 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-3 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

.emotion-1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-1 {
    overflow-y: auto;
    height: 100%;
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

.c0 {
  background: rgba(9,30,66,0.54);
  bottom: 0;
  left: 0;
  opacity: 1;
  pointer-events: initial;
  position: fixed;
  right: 0;
  top: 0;
  -webkit-transition: opacity 220ms;
  transition: opacity 220ms;
  z-index: 500;
}

<ModalWrapper
    autoFocus={true}
    data-testid="iamTheDataTestId"
    isChromeless={false}
    isHeadingMultiline={true}
    onClose={[Function]}
    scrollBehavior="inside"
    shouldCloseOnEscapePress={true}
    shouldCloseOnOverlayClick={true}
    width="medium"
  >
    <Portal
      zIndex={510}
    >
      <Portal
        containerInfo={
          .emotion-4 {
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: 510;
  -webkit-overflow-scrolling: touch;
}

.emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
            class="atlaskit-portal"
            style="z-index: 510;"
          >
            <div
              aria-hidden="false"
              class="emotion-4"
              style="transition: opacity 250ms; opacity: 0;"
            >
              <div
                data-focus-guard="true"
                style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                tabindex="0"
              />
              <div
                data-focus-guard="true"
                style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                tabindex="1"
              />
              <div
                data-focus-lock-disabled="false"
              >
                <div
                  class="c0"
                />
                <div
                  class="emotion-3"
                  style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                >
                  <div
                    class="emotion-2"
                    role="dialog"
                    tabindex="-1"
                  >
                    <div
                      class="emotion-1"
                    >
                      <div
                        class="emotion-0"
                      >
                        <div>
                          Hello
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-focus-guard="true"
                style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                tabindex="0"
              />
            </div>
          </div>
        }
      >
        <StackConsumer
          isOpen={true}
        >
          <WithAnalyticsContext(WithAnalyticsEvents(Modal))
            autoFocus={true}
            data-testid="iamTheDataTestId"
            isChromeless={false}
            isHeadingMultiline={true}
            isOpen={true}
            onClose={[Function]}
            onCloseComplete={[Function]}
            scrollBehavior="inside"
            shouldCloseOnEscapePress={true}
            shouldCloseOnOverlayClick={true}
            stackIndex={0}
            width="medium"
          >
            <AnalyticsContext
              data={
                Object {
                  "componentName": "modalDialog",
                  "packageName": "@atlaskit/modal-dialog",
                  "packageVersion": "999.9.9",
                }
              }
            >
              <WithAnalyticsEvents(Modal)
                autoFocus={true}
                data-testid="iamTheDataTestId"
                isChromeless={false}
                isHeadingMultiline={true}
                isOpen={true}
                onClose={[Function]}
                onCloseComplete={[Function]}
                scrollBehavior="inside"
                shouldCloseOnEscapePress={true}
                shouldCloseOnOverlayClick={true}
                stackIndex={0}
                width="medium"
              >
                <AnalyticsContextConsumer
                  createEventMap={
                    Object {
                      "onClose": [Function],
                    }
                  }
                  wrappedComponentProps={
                    Object {
                      "autoFocus": true,
                      "children": <MyContent />,
                      "data-testid": "iamTheDataTestId",
                      "isChromeless": false,
                      "isHeadingMultiline": true,
                      "isOpen": true,
                      "onClose": [Function],
                      "onCloseComplete": [Function],
                      "scrollBehavior": "inside",
                      "shouldCloseOnEscapePress": true,
                      "shouldCloseOnOverlayClick": true,
                      "stackIndex": 0,
                      "width": "medium",
                    }
                  }
                >
                  <Modal
                    autoFocus={true}
                    createAnalyticsEvent={[Function]}
                    data-testid="iamTheDataTestId"
                    isChromeless={false}
                    isHeadingMultiline={true}
                    isOpen={true}
                    onClose={[Function]}
                    onCloseComplete={[Function]}
                    scrollBehavior="inside"
                    shouldCloseOnEscapePress={true}
                    shouldCloseOnOverlayClick={true}
                    stackIndex={0}
                    width="medium"
                  >
                    <Component
                      in={true}
                      onExited={[Function]}
                      stackIndex={0}
                    >
                      <Transition
                        appear={true}
                        enter={true}
                        exit={true}
                        in={true}
                        mountOnEnter={false}
                        onEnter={[Function]}
                        onEntered={[Function]}
                        onEntering={[Function]}
                        onExit={[Function]}
                        onExited={[Function]}
                        onExiting={[Function]}
                        timeout={
                          Object {
                            "enter": 0,
                            "exit": 500,
                          }
                        }
                        unmountOnExit={false}
                      >
                        <FillScreen
                          aria-hidden={false}
                          scrollDistance={0}
                          style={
                            Object {
                              "opacity": 0,
                              "transition": "opacity 250ms",
                            }
                          }
                        >
                          <div
                            aria-hidden={false}
                            className="emotion-5"
                            style={
                              Object {
                                "opacity": 0,
                                "transition": "opacity 250ms",
                              }
                            }
                          >
                            <FocusLock
                              autoFocus={true}
                              isEnabled={true}
                              shouldReturnFocus={true}
                            >
                              <FocusLock
                                as="div"
                                autoFocus={true}
                                disabled={false}
                                lockProps={Object {}}
                                noFocusGuards={false}
                                persistentFocus={false}
                                returnFocus={true}
                              >
                                <div
                                  data-focus-guard={true}
                                  key="guard-first"
                                  style={
                                    Object {
                                      "height": "0px",
                                      "left": "1px",
                                      "overflow": "hidden",
                                      "padding": 0,
                                      "position": "fixed",
                                      "top": "1px",
                                      "width": "1px",
                                    }
                                  }
                                  tabIndex={0}
                                />
                                <div
                                  data-focus-guard={true}
                                  key="guard-nearest"
                                  style={
                                    Object {
                                      "height": "0px",
                                      "left": "1px",
                                      "overflow": "hidden",
                                      "padding": 0,
                                      "position": "fixed",
                                      "top": "1px",
                                      "width": "1px",
                                    }
                                  }
                                  tabIndex={1}
                                />
                                <div
                                  data-focus-lock-disabled={false}
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                >
                                  <SideEffect(FocusWatcher)
                                    autoFocus={true}
                                    disabled={false}
                                    observed={
                                      .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                                        data-focus-lock-disabled="false"
                                      >
                                        <div
                                          class="c0"
                                        />
                                        <div
                                          class="emotion-3"
                                          style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                                        >
                                          <div
                                            class="emotion-2"
                                            role="dialog"
                                            tabindex="-1"
                                          >
                                            <div
                                              class="emotion-1"
                                            >
                                              <div
                                                class="emotion-0"
                                              >
                                                <div>
                                                  Hello
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    }
                                    onActivation={[Function]}
                                    onDeactivation={[Function]}
                                    persistentFocus={false}
                                    shards={Array []}
                                  >
                                    <FocusWatcher
                                      autoFocus={true}
                                      disabled={false}
                                      observed={
                                        .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                                          data-focus-lock-disabled="false"
                                        >
                                          <div
                                            class="c0"
                                          />
                                          <div
                                            class="emotion-3"
                                            style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                                          >
                                            <div
                                              class="emotion-2"
                                              role="dialog"
                                              tabindex="-1"
                                            >
                                              <div
                                                class="emotion-1"
                                              >
                                                <div
                                                  class="emotion-0"
                                                >
                                                  <div>
                                                    Hello
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      }
                                      onActivation={[Function]}
                                      onDeactivation={[Function]}
                                      persistentFocus={false}
                                      shards={Array []}
                                    />
                                  </SideEffect(FocusWatcher)>
                                  <WithAnalyticsContext(WithAnalyticsEvents(Blanket))
                                    isTinted={true}
                                    onBlanketClicked={[Function]}
                                  >
                                    <AnalyticsContext
                                      data={
                                        Object {
                                          "componentName": "blanket",
                                          "packageName": "@atlaskit/blanket",
                                          "packageVersion": "999.9.9",
                                        }
                                      }
                                    >
                                      <WithAnalyticsEvents(Blanket)
                                        isTinted={true}
                                        onBlanketClicked={[Function]}
                                      >
                                        <AnalyticsContextConsumer
                                          createEventMap={
                                            Object {
                                              "onBlanketClicked": [Function],
                                            }
                                          }
                                          wrappedComponentProps={
                                            Object {
                                              "isTinted": true,
                                              "onBlanketClicked": [Function],
                                            }
                                          }
                                        >
                                          <Blanket
                                            canClickThrough={false}
                                            createAnalyticsEvent={[Function]}
                                            isTinted={true}
                                            onBlanketClicked={[Function]}
                                          >
                                            <styled.div
                                              canClickThrough={false}
                                              isTinted={true}
                                              onClick={[Function]}
                                            >
                                              <div
                                                className="c0"
                                                onClick={[Function]}
                                              />
                                            </styled.div>
                                          </Blanket>
                                        </AnalyticsContextConsumer>
                                      </WithAnalyticsEvents(Blanket)>
                                    </AnalyticsContext>
                                  </WithAnalyticsContext(WithAnalyticsEvents(Blanket))>
                                  <Positioner
                                    scrollBehavior="inside"
                                    style={
                                      Object {
                                        "transform": "translate3d(0, 32px, 0)",
                                        "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                                      }
                                    }
                                    widthName="medium"
                                  >
                                    <PositionerAbsolute
                                      style={
                                        Object {
                                          "transform": "translate3d(0, 32px, 0)",
                                          "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                                        }
                                      }
                                      widthName="medium"
                                    >
                                      <div
                                        className="emotion-4"
                                        style={
                                          Object {
                                            "transform": "translate3d(0, 32px, 0)",
                                            "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                                          }
                                        }
                                      >
                                        <Dialog
                                          isChromeless={false}
                                          role="dialog"
                                          tabIndex={-1}
                                        >
                                          <div
                                            className="emotion-3"
                                            role="dialog"
                                            tabIndex={-1}
                                          >
                                            <Content
                                              autoFocus={false}
                                              components={Object {}}
                                              isChromeless={false}
                                              isHeadingMultiline={true}
                                              onClose={[Function]}
                                              shouldCloseOnEscapePress={true}
                                              shouldScroll={true}
                                              stackIndex={0}
                                            >
                                              <div
                                                className="emotion-2"
                                              >
                                                <ModalHeader
                                                  isHeadingMultiline={true}
                                                  onClose={[Function]}
                                                  showKeyline={false}
                                                />
                                                <Styled(div)
                                                  className="emotion-1"
                                                >
                                                  <div
                                                    className="emotion-0"
                                                  >
                                                    <MyContent>
                                                      <div>
                                                        Hello
                                                      </div>
                                                    </MyContent>
                                                  </div>
                                                </Styled(div)>
                                                <ModalFooter
                                                  onClose={[Function]}
                                                  showKeyline={false}
                                                />
                                                <TouchProvider>
                                                  <ScrollLock
                                                    accountForScrollbars={true}
                                                  >
                                                    <Sheet
                                                      styles="body {
      box-sizing: border-box !important;
      overflow: hidden !important;
      position: relative !important;
      
      padding-right: 1024px !important;
    }"
                                                    />
                                                  </ScrollLock>
                                                </TouchProvider>
                                              </div>
                                            </Content>
                                          </div>
                                        </Dialog>
                                      </div>
                                    </PositionerAbsolute>
                                  </Positioner>
                                </div>
                                <div
                                  data-focus-guard={true}
                                  style={
                                    Object {
                                      "height": "0px",
                                      "left": "1px",
                                      "overflow": "hidden",
                                      "padding": 0,
                                      "position": "fixed",
                                      "top": "1px",
                                      "width": "1px",
                                    }
                                  }
                                  tabIndex={0}
                                />
                              </FocusLock>
                            </FocusLock>
                          </div>
                        </FillScreen>
                      </Transition>
                    </Component>
                  </Modal>
                </AnalyticsContextConsumer>
              </WithAnalyticsEvents(Modal)>
            </AnalyticsContext>
          </WithAnalyticsContext(WithAnalyticsEvents(Modal))>
        </StackConsumer>
      </Portal>
    </Portal>
  </ModalWrapper>,
  .emotion-5 {
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: 510;
  -webkit-overflow-scrolling: touch;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-4 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-3 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-3 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

.emotion-1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-1 {
    overflow-y: auto;
    height: 100%;
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

.c0 {
  background: rgba(9,30,66,0.54);
  bottom: 0;
  left: 0;
  opacity: 1;
  pointer-events: initial;
  position: fixed;
  right: 0;
  top: 0;
  -webkit-transition: opacity 220ms;
  transition: opacity 220ms;
  z-index: 500;
}

<WithAnalyticsContext(WithAnalyticsEvents(Modal))
    autoFocus={true}
    data-testid="iamTheDataTestId"
    isChromeless={false}
    isHeadingMultiline={true}
    isOpen={true}
    onClose={[Function]}
    onCloseComplete={[Function]}
    scrollBehavior="inside"
    shouldCloseOnEscapePress={true}
    shouldCloseOnOverlayClick={true}
    stackIndex={0}
    width="medium"
  >
    <AnalyticsContext
      data={
        Object {
          "componentName": "modalDialog",
          "packageName": "@atlaskit/modal-dialog",
          "packageVersion": "999.9.9",
        }
      }
    >
      <WithAnalyticsEvents(Modal)
        autoFocus={true}
        data-testid="iamTheDataTestId"
        isChromeless={false}
        isHeadingMultiline={true}
        isOpen={true}
        onClose={[Function]}
        onCloseComplete={[Function]}
        scrollBehavior="inside"
        shouldCloseOnEscapePress={true}
        shouldCloseOnOverlayClick={true}
        stackIndex={0}
        width="medium"
      >
        <AnalyticsContextConsumer
          createEventMap={
            Object {
              "onClose": [Function],
            }
          }
          wrappedComponentProps={
            Object {
              "autoFocus": true,
              "children": <MyContent />,
              "data-testid": "iamTheDataTestId",
              "isChromeless": false,
              "isHeadingMultiline": true,
              "isOpen": true,
              "onClose": [Function],
              "onCloseComplete": [Function],
              "scrollBehavior": "inside",
              "shouldCloseOnEscapePress": true,
              "shouldCloseOnOverlayClick": true,
              "stackIndex": 0,
              "width": "medium",
            }
          }
        >
          <Modal
            autoFocus={true}
            createAnalyticsEvent={[Function]}
            data-testid="iamTheDataTestId"
            isChromeless={false}
            isHeadingMultiline={true}
            isOpen={true}
            onClose={[Function]}
            onCloseComplete={[Function]}
            scrollBehavior="inside"
            shouldCloseOnEscapePress={true}
            shouldCloseOnOverlayClick={true}
            stackIndex={0}
            width="medium"
          >
            <Component
              in={true}
              onExited={[Function]}
              stackIndex={0}
            >
              <Transition
                appear={true}
                enter={true}
                exit={true}
                in={true}
                mountOnEnter={false}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                timeout={
                  Object {
                    "enter": 0,
                    "exit": 500,
                  }
                }
                unmountOnExit={false}
              >
                <FillScreen
                  aria-hidden={false}
                  scrollDistance={0}
                  style={
                    Object {
                      "opacity": 0,
                      "transition": "opacity 250ms",
                    }
                  }
                >
                  <div
                    aria-hidden={false}
                    className="emotion-5"
                    style={
                      Object {
                        "opacity": 0,
                        "transition": "opacity 250ms",
                      }
                    }
                  >
                    <FocusLock
                      autoFocus={true}
                      isEnabled={true}
                      shouldReturnFocus={true}
                    >
                      <FocusLock
                        as="div"
                        autoFocus={true}
                        disabled={false}
                        lockProps={Object {}}
                        noFocusGuards={false}
                        persistentFocus={false}
                        returnFocus={true}
                      >
                        <div
                          data-focus-guard={true}
                          key="guard-first"
                          style={
                            Object {
                              "height": "0px",
                              "left": "1px",
                              "overflow": "hidden",
                              "padding": 0,
                              "position": "fixed",
                              "top": "1px",
                              "width": "1px",
                            }
                          }
                          tabIndex={0}
                        />
                        <div
                          data-focus-guard={true}
                          key="guard-nearest"
                          style={
                            Object {
                              "height": "0px",
                              "left": "1px",
                              "overflow": "hidden",
                              "padding": 0,
                              "position": "fixed",
                              "top": "1px",
                              "width": "1px",
                            }
                          }
                          tabIndex={1}
                        />
                        <div
                          data-focus-lock-disabled={false}
                          onBlur={[Function]}
                          onFocus={[Function]}
                        >
                          <SideEffect(FocusWatcher)
                            autoFocus={true}
                            disabled={false}
                            observed={
                              .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                                data-focus-lock-disabled="false"
                              >
                                <div
                                  class="c0"
                                />
                                <div
                                  class="emotion-3"
                                  style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                                >
                                  <div
                                    class="emotion-2"
                                    role="dialog"
                                    tabindex="-1"
                                  >
                                    <div
                                      class="emotion-1"
                                    >
                                      <div
                                        class="emotion-0"
                                      >
                                        <div>
                                          Hello
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            }
                            onActivation={[Function]}
                            onDeactivation={[Function]}
                            persistentFocus={false}
                            shards={Array []}
                          >
                            <FocusWatcher
                              autoFocus={true}
                              disabled={false}
                              observed={
                                .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                                  data-focus-lock-disabled="false"
                                >
                                  <div
                                    class="c0"
                                  />
                                  <div
                                    class="emotion-3"
                                    style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                                  >
                                    <div
                                      class="emotion-2"
                                      role="dialog"
                                      tabindex="-1"
                                    >
                                      <div
                                        class="emotion-1"
                                      >
                                        <div
                                          class="emotion-0"
                                        >
                                          <div>
                                            Hello
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              }
                              onActivation={[Function]}
                              onDeactivation={[Function]}
                              persistentFocus={false}
                              shards={Array []}
                            />
                          </SideEffect(FocusWatcher)>
                          <WithAnalyticsContext(WithAnalyticsEvents(Blanket))
                            isTinted={true}
                            onBlanketClicked={[Function]}
                          >
                            <AnalyticsContext
                              data={
                                Object {
                                  "componentName": "blanket",
                                  "packageName": "@atlaskit/blanket",
                                  "packageVersion": "999.9.9",
                                }
                              }
                            >
                              <WithAnalyticsEvents(Blanket)
                                isTinted={true}
                                onBlanketClicked={[Function]}
                              >
                                <AnalyticsContextConsumer
                                  createEventMap={
                                    Object {
                                      "onBlanketClicked": [Function],
                                    }
                                  }
                                  wrappedComponentProps={
                                    Object {
                                      "isTinted": true,
                                      "onBlanketClicked": [Function],
                                    }
                                  }
                                >
                                  <Blanket
                                    canClickThrough={false}
                                    createAnalyticsEvent={[Function]}
                                    isTinted={true}
                                    onBlanketClicked={[Function]}
                                  >
                                    <styled.div
                                      canClickThrough={false}
                                      isTinted={true}
                                      onClick={[Function]}
                                    >
                                      <div
                                        className="c0"
                                        onClick={[Function]}
                                      />
                                    </styled.div>
                                  </Blanket>
                                </AnalyticsContextConsumer>
                              </WithAnalyticsEvents(Blanket)>
                            </AnalyticsContext>
                          </WithAnalyticsContext(WithAnalyticsEvents(Blanket))>
                          <Positioner
                            scrollBehavior="inside"
                            style={
                              Object {
                                "transform": "translate3d(0, 32px, 0)",
                                "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                              }
                            }
                            widthName="medium"
                          >
                            <PositionerAbsolute
                              style={
                                Object {
                                  "transform": "translate3d(0, 32px, 0)",
                                  "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                                }
                              }
                              widthName="medium"
                            >
                              <div
                                className="emotion-4"
                                style={
                                  Object {
                                    "transform": "translate3d(0, 32px, 0)",
                                    "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                                  }
                                }
                              >
                                <Dialog
                                  isChromeless={false}
                                  role="dialog"
                                  tabIndex={-1}
                                >
                                  <div
                                    className="emotion-3"
                                    role="dialog"
                                    tabIndex={-1}
                                  >
                                    <Content
                                      autoFocus={false}
                                      components={Object {}}
                                      isChromeless={false}
                                      isHeadingMultiline={true}
                                      onClose={[Function]}
                                      shouldCloseOnEscapePress={true}
                                      shouldScroll={true}
                                      stackIndex={0}
                                    >
                                      <div
                                        className="emotion-2"
                                      >
                                        <ModalHeader
                                          isHeadingMultiline={true}
                                          onClose={[Function]}
                                          showKeyline={false}
                                        />
                                        <Styled(div)
                                          className="emotion-1"
                                        >
                                          <div
                                            className="emotion-0"
                                          >
                                            <MyContent>
                                              <div>
                                                Hello
                                              </div>
                                            </MyContent>
                                          </div>
                                        </Styled(div)>
                                        <ModalFooter
                                          onClose={[Function]}
                                          showKeyline={false}
                                        />
                                        <TouchProvider>
                                          <ScrollLock
                                            accountForScrollbars={true}
                                          >
                                            <Sheet
                                              styles="body {
      box-sizing: border-box !important;
      overflow: hidden !important;
      position: relative !important;
      
      padding-right: 1024px !important;
    }"
                                            />
                                          </ScrollLock>
                                        </TouchProvider>
                                      </div>
                                    </Content>
                                  </div>
                                </Dialog>
                              </div>
                            </PositionerAbsolute>
                          </Positioner>
                        </div>
                        <div
                          data-focus-guard={true}
                          style={
                            Object {
                              "height": "0px",
                              "left": "1px",
                              "overflow": "hidden",
                              "padding": 0,
                              "position": "fixed",
                              "top": "1px",
                              "width": "1px",
                            }
                          }
                          tabIndex={0}
                        />
                      </FocusLock>
                    </FocusLock>
                  </div>
                </FillScreen>
              </Transition>
            </Component>
          </Modal>
        </AnalyticsContextConsumer>
      </WithAnalyticsEvents(Modal)>
    </AnalyticsContext>
  </WithAnalyticsContext(WithAnalyticsEvents(Modal))>,
  .emotion-5 {
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: 510;
  -webkit-overflow-scrolling: touch;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-4 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-3 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-3 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

.emotion-1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-1 {
    overflow-y: auto;
    height: 100%;
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

.c0 {
  background: rgba(9,30,66,0.54);
  bottom: 0;
  left: 0;
  opacity: 1;
  pointer-events: initial;
  position: fixed;
  right: 0;
  top: 0;
  -webkit-transition: opacity 220ms;
  transition: opacity 220ms;
  z-index: 500;
}

<WithAnalyticsEvents(Modal)
    autoFocus={true}
    data-testid="iamTheDataTestId"
    isChromeless={false}
    isHeadingMultiline={true}
    isOpen={true}
    onClose={[Function]}
    onCloseComplete={[Function]}
    scrollBehavior="inside"
    shouldCloseOnEscapePress={true}
    shouldCloseOnOverlayClick={true}
    stackIndex={0}
    width="medium"
  >
    <AnalyticsContextConsumer
      createEventMap={
        Object {
          "onClose": [Function],
        }
      }
      wrappedComponentProps={
        Object {
          "autoFocus": true,
          "children": <MyContent />,
          "data-testid": "iamTheDataTestId",
          "isChromeless": false,
          "isHeadingMultiline": true,
          "isOpen": true,
          "onClose": [Function],
          "onCloseComplete": [Function],
          "scrollBehavior": "inside",
          "shouldCloseOnEscapePress": true,
          "shouldCloseOnOverlayClick": true,
          "stackIndex": 0,
          "width": "medium",
        }
      }
    >
      <Modal
        autoFocus={true}
        createAnalyticsEvent={[Function]}
        data-testid="iamTheDataTestId"
        isChromeless={false}
        isHeadingMultiline={true}
        isOpen={true}
        onClose={[Function]}
        onCloseComplete={[Function]}
        scrollBehavior="inside"
        shouldCloseOnEscapePress={true}
        shouldCloseOnOverlayClick={true}
        stackIndex={0}
        width="medium"
      >
        <Component
          in={true}
          onExited={[Function]}
          stackIndex={0}
        >
          <Transition
            appear={true}
            enter={true}
            exit={true}
            in={true}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={
              Object {
                "enter": 0,
                "exit": 500,
              }
            }
            unmountOnExit={false}
          >
            <FillScreen
              aria-hidden={false}
              scrollDistance={0}
              style={
                Object {
                  "opacity": 0,
                  "transition": "opacity 250ms",
                }
              }
            >
              <div
                aria-hidden={false}
                className="emotion-5"
                style={
                  Object {
                    "opacity": 0,
                    "transition": "opacity 250ms",
                  }
                }
              >
                <FocusLock
                  autoFocus={true}
                  isEnabled={true}
                  shouldReturnFocus={true}
                >
                  <FocusLock
                    as="div"
                    autoFocus={true}
                    disabled={false}
                    lockProps={Object {}}
                    noFocusGuards={false}
                    persistentFocus={false}
                    returnFocus={true}
                  >
                    <div
                      data-focus-guard={true}
                      key="guard-first"
                      style={
                        Object {
                          "height": "0px",
                          "left": "1px",
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "fixed",
                          "top": "1px",
                          "width": "1px",
                        }
                      }
                      tabIndex={0}
                    />
                    <div
                      data-focus-guard={true}
                      key="guard-nearest"
                      style={
                        Object {
                          "height": "0px",
                          "left": "1px",
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "fixed",
                          "top": "1px",
                          "width": "1px",
                        }
                      }
                      tabIndex={1}
                    />
                    <div
                      data-focus-lock-disabled={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                    >
                      <SideEffect(FocusWatcher)
                        autoFocus={true}
                        disabled={false}
                        observed={
                          .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                            data-focus-lock-disabled="false"
                          >
                            <div
                              class="c0"
                            />
                            <div
                              class="emotion-3"
                              style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                            >
                              <div
                                class="emotion-2"
                                role="dialog"
                                tabindex="-1"
                              >
                                <div
                                  class="emotion-1"
                                >
                                  <div
                                    class="emotion-0"
                                  >
                                    <div>
                                      Hello
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        }
                        onActivation={[Function]}
                        onDeactivation={[Function]}
                        persistentFocus={false}
                        shards={Array []}
                      >
                        <FocusWatcher
                          autoFocus={true}
                          disabled={false}
                          observed={
                            .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                              data-focus-lock-disabled="false"
                            >
                              <div
                                class="c0"
                              />
                              <div
                                class="emotion-3"
                                style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                              >
                                <div
                                  class="emotion-2"
                                  role="dialog"
                                  tabindex="-1"
                                >
                                  <div
                                    class="emotion-1"
                                  >
                                    <div
                                      class="emotion-0"
                                    >
                                      <div>
                                        Hello
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          }
                          onActivation={[Function]}
                          onDeactivation={[Function]}
                          persistentFocus={false}
                          shards={Array []}
                        />
                      </SideEffect(FocusWatcher)>
                      <WithAnalyticsContext(WithAnalyticsEvents(Blanket))
                        isTinted={true}
                        onBlanketClicked={[Function]}
                      >
                        <AnalyticsContext
                          data={
                            Object {
                              "componentName": "blanket",
                              "packageName": "@atlaskit/blanket",
                              "packageVersion": "999.9.9",
                            }
                          }
                        >
                          <WithAnalyticsEvents(Blanket)
                            isTinted={true}
                            onBlanketClicked={[Function]}
                          >
                            <AnalyticsContextConsumer
                              createEventMap={
                                Object {
                                  "onBlanketClicked": [Function],
                                }
                              }
                              wrappedComponentProps={
                                Object {
                                  "isTinted": true,
                                  "onBlanketClicked": [Function],
                                }
                              }
                            >
                              <Blanket
                                canClickThrough={false}
                                createAnalyticsEvent={[Function]}
                                isTinted={true}
                                onBlanketClicked={[Function]}
                              >
                                <styled.div
                                  canClickThrough={false}
                                  isTinted={true}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c0"
                                    onClick={[Function]}
                                  />
                                </styled.div>
                              </Blanket>
                            </AnalyticsContextConsumer>
                          </WithAnalyticsEvents(Blanket)>
                        </AnalyticsContext>
                      </WithAnalyticsContext(WithAnalyticsEvents(Blanket))>
                      <Positioner
                        scrollBehavior="inside"
                        style={
                          Object {
                            "transform": "translate3d(0, 32px, 0)",
                            "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                          }
                        }
                        widthName="medium"
                      >
                        <PositionerAbsolute
                          style={
                            Object {
                              "transform": "translate3d(0, 32px, 0)",
                              "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                            }
                          }
                          widthName="medium"
                        >
                          <div
                            className="emotion-4"
                            style={
                              Object {
                                "transform": "translate3d(0, 32px, 0)",
                                "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                              }
                            }
                          >
                            <Dialog
                              isChromeless={false}
                              role="dialog"
                              tabIndex={-1}
                            >
                              <div
                                className="emotion-3"
                                role="dialog"
                                tabIndex={-1}
                              >
                                <Content
                                  autoFocus={false}
                                  components={Object {}}
                                  isChromeless={false}
                                  isHeadingMultiline={true}
                                  onClose={[Function]}
                                  shouldCloseOnEscapePress={true}
                                  shouldScroll={true}
                                  stackIndex={0}
                                >
                                  <div
                                    className="emotion-2"
                                  >
                                    <ModalHeader
                                      isHeadingMultiline={true}
                                      onClose={[Function]}
                                      showKeyline={false}
                                    />
                                    <Styled(div)
                                      className="emotion-1"
                                    >
                                      <div
                                        className="emotion-0"
                                      >
                                        <MyContent>
                                          <div>
                                            Hello
                                          </div>
                                        </MyContent>
                                      </div>
                                    </Styled(div)>
                                    <ModalFooter
                                      onClose={[Function]}
                                      showKeyline={false}
                                    />
                                    <TouchProvider>
                                      <ScrollLock
                                        accountForScrollbars={true}
                                      >
                                        <Sheet
                                          styles="body {
      box-sizing: border-box !important;
      overflow: hidden !important;
      position: relative !important;
      
      padding-right: 1024px !important;
    }"
                                        />
                                      </ScrollLock>
                                    </TouchProvider>
                                  </div>
                                </Content>
                              </div>
                            </Dialog>
                          </div>
                        </PositionerAbsolute>
                      </Positioner>
                    </div>
                    <div
                      data-focus-guard={true}
                      style={
                        Object {
                          "height": "0px",
                          "left": "1px",
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "fixed",
                          "top": "1px",
                          "width": "1px",
                        }
                      }
                      tabIndex={0}
                    />
                  </FocusLock>
                </FocusLock>
              </div>
            </FillScreen>
          </Transition>
        </Component>
      </Modal>
    </AnalyticsContextConsumer>
  </WithAnalyticsEvents(Modal)>,
  .emotion-5 {
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: 510;
  -webkit-overflow-scrolling: touch;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-4 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-3 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-3 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

.emotion-1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-1 {
    overflow-y: auto;
    height: 100%;
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

.c0 {
  background: rgba(9,30,66,0.54);
  bottom: 0;
  left: 0;
  opacity: 1;
  pointer-events: initial;
  position: fixed;
  right: 0;
  top: 0;
  -webkit-transition: opacity 220ms;
  transition: opacity 220ms;
  z-index: 500;
}

<Modal
    autoFocus={true}
    createAnalyticsEvent={[Function]}
    data-testid="iamTheDataTestId"
    isChromeless={false}
    isHeadingMultiline={true}
    isOpen={true}
    onClose={[Function]}
    onCloseComplete={[Function]}
    scrollBehavior="inside"
    shouldCloseOnEscapePress={true}
    shouldCloseOnOverlayClick={true}
    stackIndex={0}
    width="medium"
  >
    <Component
      in={true}
      onExited={[Function]}
      stackIndex={0}
    >
      <Transition
        appear={true}
        enter={true}
        exit={true}
        in={true}
        mountOnEnter={false}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={
          Object {
            "enter": 0,
            "exit": 500,
          }
        }
        unmountOnExit={false}
      >
        <FillScreen
          aria-hidden={false}
          scrollDistance={0}
          style={
            Object {
              "opacity": 0,
              "transition": "opacity 250ms",
            }
          }
        >
          <div
            aria-hidden={false}
            className="emotion-5"
            style={
              Object {
                "opacity": 0,
                "transition": "opacity 250ms",
              }
            }
          >
            <FocusLock
              autoFocus={true}
              isEnabled={true}
              shouldReturnFocus={true}
            >
              <FocusLock
                as="div"
                autoFocus={true}
                disabled={false}
                lockProps={Object {}}
                noFocusGuards={false}
                persistentFocus={false}
                returnFocus={true}
              >
                <div
                  data-focus-guard={true}
                  key="guard-first"
                  style={
                    Object {
                      "height": "0px",
                      "left": "1px",
                      "overflow": "hidden",
                      "padding": 0,
                      "position": "fixed",
                      "top": "1px",
                      "width": "1px",
                    }
                  }
                  tabIndex={0}
                />
                <div
                  data-focus-guard={true}
                  key="guard-nearest"
                  style={
                    Object {
                      "height": "0px",
                      "left": "1px",
                      "overflow": "hidden",
                      "padding": 0,
                      "position": "fixed",
                      "top": "1px",
                      "width": "1px",
                    }
                  }
                  tabIndex={1}
                />
                <div
                  data-focus-lock-disabled={false}
                  onBlur={[Function]}
                  onFocus={[Function]}
                >
                  <SideEffect(FocusWatcher)
                    autoFocus={true}
                    disabled={false}
                    observed={
                      .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                        data-focus-lock-disabled="false"
                      >
                        <div
                          class="c0"
                        />
                        <div
                          class="emotion-3"
                          style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                        >
                          <div
                            class="emotion-2"
                            role="dialog"
                            tabindex="-1"
                          >
                            <div
                              class="emotion-1"
                            >
                              <div
                                class="emotion-0"
                              >
                                <div>
                                  Hello
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    }
                    onActivation={[Function]}
                    onDeactivation={[Function]}
                    persistentFocus={false}
                    shards={Array []}
                  >
                    <FocusWatcher
                      autoFocus={true}
                      disabled={false}
                      observed={
                        .emotion-3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: calc(100% - 119px);
  left: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 120px);
  position: absolute;
  right: 0;
  top: 60px;
  width: 600px;
  z-index: 510;
  pointer-events: none;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-3 {
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    max-width: 100%;
    width: 100%;
  }
}

.emotion-2 {
  background-color: #FFFFFF;
  border-radius: 3px;
  box-shadow: 0 0 0 1px rgba(9,30,66,0.08),0 2px 1px rgba(9,30,66,0.08), 0 0 20px -6px rgba(9,30,66,0.31);
  color: #091E42;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: auto;
  max-height: 100%;
  outline: 0;
  pointer-events: auto;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-2 {
    max-height: calc(100% - 1px);
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-2 {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  max-height: 100%;
}

@media only screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-1 {
    max-height: calc(100% - 1px);
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 24px;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 2px 24px;
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

@media (min-width:320px) and (max-width:480px) {
  .emotion-0 {
    overflow-y: auto;
    height: 100%;
  }
}

<div
                          data-focus-lock-disabled="false"
                        >
                          <div
                            class="c0"
                          />
                          <div
                            class="emotion-3"
                            style="transition: transform 500ms cubic-bezier(0.23, 1, 0.32, 1); transform: translate3d(0, 32px, 0);"
                          >
                            <div
                              class="emotion-2"
                              role="dialog"
                              tabindex="-1"
                            >
                              <div
                                class="emotion-1"
                              >
                                <div
                                  class="emotion-0"
                                >
                                  <div>
                                    Hello
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                      onActivation={[Function]}
                      onDeactivation={[Function]}
                      persistentFocus={false}
                      shards={Array []}
                    />
                  </SideEffect(FocusWatcher)>
                  <WithAnalyticsContext(WithAnalyticsEvents(Blanket))
                    isTinted={true}
                    onBlanketClicked={[Function]}
                  >
                    <AnalyticsContext
                      data={
                        Object {
                          "componentName": "blanket",
                          "packageName": "@atlaskit/blanket",
                          "packageVersion": "999.9.9",
                        }
                      }
                    >
                      <WithAnalyticsEvents(Blanket)
                        isTinted={true}
                        onBlanketClicked={[Function]}
                      >
                        <AnalyticsContextConsumer
                          createEventMap={
                            Object {
                              "onBlanketClicked": [Function],
                            }
                          }
                          wrappedComponentProps={
                            Object {
                              "isTinted": true,
                              "onBlanketClicked": [Function],
                            }
                          }
                        >
                          <Blanket
                            canClickThrough={false}
                            createAnalyticsEvent={[Function]}
                            isTinted={true}
                            onBlanketClicked={[Function]}
                          >
                            <styled.div
                              canClickThrough={false}
                              isTinted={true}
                              onClick={[Function]}
                            >
                              <div
                                className="c0"
                                onClick={[Function]}
                              />
                            </styled.div>
                          </Blanket>
                        </AnalyticsContextConsumer>
                      </WithAnalyticsEvents(Blanket)>
                    </AnalyticsContext>
                  </WithAnalyticsContext(WithAnalyticsEvents(Blanket))>
                  <Positioner
                    scrollBehavior="inside"
                    style={
                      Object {
                        "transform": "translate3d(0, 32px, 0)",
                        "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                      }
                    }
                    widthName="medium"
                  >
                    <PositionerAbsolute
                      style={
                        Object {
                          "transform": "translate3d(0, 32px, 0)",
                          "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                        }
                      }
                      widthName="medium"
                    >
                      <div
                        className="emotion-4"
                        style={
                          Object {
                            "transform": "translate3d(0, 32px, 0)",
                            "transition": "transform 500ms cubic-bezier(0.23, 1, 0.32, 1)",
                          }
                        }
                      >
                        <Dialog
                          isChromeless={false}
                          role="dialog"
                          tabIndex={-1}
                        >
                          <div
                            className="emotion-3"
                            role="dialog"
                            tabIndex={-1}
                          >
                            <Content
                              autoFocus={false}
                              components={Object {}}
                              isChromeless={false}
                              isHeadingMultiline={true}
                              onClose={[Function]}
                              shouldCloseOnEscapePress={true}
                              shouldScroll={true}
                              stackIndex={0}
                            >
                              <div
                                className="emotion-2"
                              >
                                <ModalHeader
                                  isHeadingMultiline={true}
                                  onClose={[Function]}
                                  showKeyline={false}
                                />
                                <Styled(div)
                                  className="emotion-1"
                                >
                                  <div
                                    className="emotion-0"
                                  >
                                    <MyContent>
                                      <div>
                                        Hello
                                      </div>
                                    </MyContent>
                                  </div>
                                </Styled(div)>
                                <ModalFooter
                                  onClose={[Function]}
                                  showKeyline={false}
                                />
                                <TouchProvider>
                                  <ScrollLock
                                    accountForScrollbars={true}
                                  >
                                    <Sheet
                                      styles="body {
      box-sizing: border-box !important;
      overflow: hidden !important;
      position: relative !important;
      
      padding-right: 1024px !important;
    }"
                                    />
                                  </ScrollLock>
                                </TouchProvider>
                              </div>
                            </Content>
                          </div>
                        </Dialog>
                      </div>
                    </PositionerAbsolute>
                  </Positioner>
                </div>
                <div
                  data-focus-guard={true}
                  style={
                    Object {
                      "height": "0px",
                      "left": "1px",
                      "overflow": "hidden",
                      "padding": 0,
                      "position": "fixed",
                      "top": "1px",
                      "width": "1px",
                    }
                  }
                  tabIndex={0}
                />
              </FocusLock>
            </FocusLock>
          </div>
        </FillScreen>
      </Transition>
    </Component>
  </Modal>,
]
`;
