// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button snapshot should be same with data-testid  1`] = `
.emotion-2 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  border-width: 0;
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
  font-style: normal;
  font-weight: normal;
  max-width: 100%;
  outline: none !important;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
  background: rgba(9,30,66,0.04);
  border-radius: 3px;
  box-shadow: 0 0 0 2px inherit;
  color: #505F79 !important;
  cursor: default;
  height: 2.2857142857142856em;
  line-height: 2.2857142857142856em;
  padding: 0 8px;
  -webkit-transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  -webkit-transition-duration: 0.1s,0.15s;
  transition-duration: 0.1s,0.15s;
  vertical-align: middle;
  width: auto;
}

.emotion-2::-moz-focus-inner {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-2:hover {
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
}

.emotion-1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
}

.emotion-0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  margin: 0 4px;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  opacity: 1;
}

<WithAnalyticsContext(WithAnalyticsEvents(Button))
  data-testid="iamTheDataTestId"
>
  <AnalyticsContext
    data={
      Object {
        "componentName": "button",
        "packageName": "@atlaskit/button",
        "packageVersion": "999.9.9",
      }
    }
  >
    <WithAnalyticsEvents(Button)
      data-testid="iamTheDataTestId"
    >
      <AnalyticsContextConsumer
        createEventMap={
          Object {
            "onClick": [Function],
          }
        }
        wrappedComponentProps={
          Object {
            "children": "Button",
            "data-testid": "iamTheDataTestId",
          }
        }
      >
        <Button
          createAnalyticsEvent={[Function]}
          data-testid="iamTheDataTestId"
          onClick={[Function]}
        >
          <Button
            appearance="default"
            autoFocus={false}
            consumerRef={null}
            createAnalyticsEvent={[Function]}
            data-testid="iamTheDataTestId"
            isDisabled={false}
            isLoading={false}
            isSelected={false}
            onClick={[Function]}
            shouldFitContainer={false}
            spacing="default"
            theme={[Function]}
            type="button"
          >
            <Provider
              value={[Function]}
            >
              <Consumer>
                <Consumer
                  appearance="default"
                  autoFocus={false}
                  consumerRef={null}
                  createAnalyticsEvent={[Function]}
                  data-testid="iamTheDataTestId"
                  iconIsOnlyChild={false}
                  isDisabled={false}
                  isLoading={false}
                  isSelected={false}
                  mode="light"
                  onClick={[Function]}
                  shouldFitContainer={false}
                  spacing="default"
                  state="default"
                  theme={[Function]}
                  type="button"
                >
                  <button
                    autoFocus={false}
                    className="emotion-2"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    type="button"
                  >
                    <Component
                      fit={false}
                      onClick={[Function]}
                    >
                      <span
                        className="emotion-1"
                        onClick={[Function]}
                      >
                        <Component
                          followsIcon={false}
                          isLoading={false}
                          spacing="default"
                        >
                          <span
                            className="emotion-0"
                          >
                            Button
                          </span>
                        </Component>
                      </span>
                    </Component>
                  </button>
                </Consumer>
              </Consumer>
            </Provider>
          </Button>
        </Button>
      </AnalyticsContextConsumer>
    </WithAnalyticsEvents(Button)>
  </AnalyticsContext>
</WithAnalyticsContext(WithAnalyticsEvents(Button))>
`;
